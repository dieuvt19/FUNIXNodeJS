'use strict';

const errors = {
  '-32000': 'Server error',
  '-32600': 'Invalid Request',
  '-32601': 'Method not found',
  '-32602': 'Invalid params',
  '-32603': 'Internal error',
  '-32700': 'Parse error'
};

/**
 * Creates a JSON-RPC 2.0-compliant error.
 * https://github.com/jshttp/http-errors/blob/master/index.js
 * @param {Number} code - error code
 * @param {String} message - error message
 * @return {Object}
 */

module.exports = function createError() {
  let err;
  let msg;
  let code = -32000; // Server error
  let props = {};
  for (let i = 0; i < arguments.length; i++) {
    let arg = arguments[i];
    if (arg instanceof Error) {
      err = arg;
      code = err.code || err.status;
      continue;
    }

    switch (typeof arg) {
      case 'string':
        msg = arg;
        break;
      case 'number':
        code = arg;
        break;
      case 'object':
        props = arg;
        break;
    }
  }

  if (typeof code !== 'number') {
    code = -32000;
  }

  if (!err) {
    err = new Error(msg || errors[code] || 'Internal Server Error');
    Error.captureStackTrace(err, createError);
  }

  // add properties to generic error
  if (err.code !== code) {
    // err.expose?
    err.code = code;
  }

  for (let key in props) {
    if (key !== 'code') {
      err[key] = props[key];
    }
  }

  // for JSON.stringify
  Object.defineProperty(err, 'message', {
    enumerable: true,
    configurable: true
  });

  return err;
};
