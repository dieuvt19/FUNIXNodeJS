'use strict';

/**
 * Module dependencies.
 */
const debug = require('debug')('pud:context');
const delegate = require('delegates');
const createError = require('./createError');

/**
 * Context prototype.
 */

const proto = module.exports = {

  /**
   * Send message to client.
   *
   * @param {String} data
   * @returns
   */
  send(data) {
    this.socket.send(data);
  },

  /**
   * Send json to client.
   *
   * @param {any} obj
   * @returns
   */
  json(obj) {
    if (typeof obj !== 'object') return this.send(obj);

    obj = Object.assign({ id: this.id || null, jsonrpc: '2.0' }, obj);
    !this.app.get('standard') && delete obj.jsonrpc; // send simple json
    this.send(JSON.stringify(obj));
  },

  /**
   * Throw an error with `msg` and optional `code`
   * defaulting to -32000. Note that these are user-level
   * errors, and the message may be exposed to the client.
   *
   *    ctx.throw(-32600)
   *    ctx.throw('Invalid method name', -32600)
   *    ctx.throw(-32602, 'Method not specified')
   *    ctx.throw('something exploded')
   *    ctx.throw(new Error('Invalid method name'), -32600);
   *    ctx.throw(-32600, new Error('Invalid params'));
   *
   * @param {String|Number|Error} err, msg or code
   * @param {String|Number|Error} [err, msg or code]
   * @param {Object} [props]
   * @api public
   */

  throw(...args) {
    throw createError(...args);
  },

  respond() {
    let body = this.body;

    debug('silent', this.silent);
    if (this.silent || !this.id) return; // notification or rpc batch requests
    if (Buffer.isBuffer(body)) return this.send(body);

    return this.json({ result: body });
  },

  /**
   * Default error handling.
   *
   * @param {Error} err
   * @api private
   */

  onerror(err) {
    // don't do anything if there is no error.
    // this allows you to pass `this.onerror`
    // to node-style callbacks.
    if (null == err) return;

    if (!(err instanceof Error)) {
      const newErr = new Error('non-error thrown: ' + err);
      // https://github.com/koajs/onerror/blob/master/index.js
      // err maybe an object, try to copy the name, message and stack to the new error instance
      if (err) {
        if (err.name) newErr.name = err.name;
        if (err.message) newErr.message = err.message;
        if (err.stack) newErr.stack = err.stack;
        if (err.status) newErr.status = err.status;
        if (err.headers) newErr.headers = err.headers;
      }
      err = newErr;
    }

    // delegate
    this.app.emit('error', err, this);

    debug('silent', this.silent);
    if (this.silent) return; // client sent a notification, so we won't need a reply

    // reply err
    return this.json({ error: createError(err) });
  }
};

/**
 * Message delegation.
 */

delegate(proto, 'msg')
  .access('id')
  .access('method')
  .access('params')
  .access('jsonrpc');

/**
 * Socket delegation.
 */

delegate(proto, 'socket')
  .access('path');
